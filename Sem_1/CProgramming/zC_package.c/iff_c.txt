1) What would be the output of the following program?

    #include <stdio.h>;
    int main()
    {
        short int x=32770;
        short int y=32785;
    printf("%d",x);
    printf("\n%d",y);
    return 0;
    }
A) -32767, -32755
B) -32766, -32751
C) Garbage value
D) 32768, 32456
[Topic : Data Types]


2) Assume the following.

    sizeof(int) = 4 bytes
    sizeof(char *) = 4 bytes
    sizeof(char) = 1 byte

    What is the output of the code below on a 32bit machine?
    #include <stdio.h>
    int main() 
    {
        int number = 20;
        char *ptr;
        ptr = (char *) &number;
        printf("%x",*ptr);
        return 0;
    }
A) Invalid operation
B) 14
C) Some Junk value
D) 20
[Topic : Pointers]


3) What is the size (in bytes) for the following structures on a 32bit machine installed with
the Linux Operating System?
    sizeof(int) = 4 bytes
    sizeof(short) = 2 bytes
    sizeof(char) = 1 byte
    struct foo {
        int d1;
        int d2;
        char c1;
        char *c2;
        short s;
    };
A) 12
B) 10
C) 15
D) 16
[Topic : Memory and Data representation]

4) What is the output of the code below?

    #include <stdio.h>
    int main() {
        char string[] = "BADGERS";
        char *ptr = string;
        *ptr = *ptr + 2;
        ptr = ptr + 2;
        printf("%c", *ptr);
        ptr--;
        printf("%c", *ptr);
        ptr = string;
        printf("%c", *ptr);
        return 0;
    }
A) DAB
B) BAD
C) BAB
D) DAD
[Topic : Pointers]


5) Consider the following three C functions :

    [PI] int * g (void)
    {
        int x= 10;
        return (&amp;x);
    }
    [P2] int * g (void)
    {
        int * px;
        *px= 10;
        return px;
    }
    [P3] int *g (void)
    {
        int *px;
        px = (int *) malloc (sizeof(int));
        *px= 10;
        return px;
    }
Which of the above three functions are likely to cause problems with pointers?

A) Only P1 and P3
B) Only P1 and P2
C) Only P3
D) P1, P2 and P3
[Topic : Pointers]  


6) What will be the output of the following program?

    #include<stdio.h>
    int main()
    {
        int a[5] = {5, 1, 15, 20, 25};
        int i, j, m;
        i = ++a[1];
        j = a[1]++;
        m = a[i++];
        printf(&quot;%d, %d, %d&quot;, i, j, m);
        return 0;
    }

A) 3, 2, 15
B) 1, 2, 5
C) 2, 1, 15
D) 2, 3, 20
[Topic : Arrays]


7) What is the output of the following program?

    # include <stdio.h>
    int main()
    {
        char str1[] = "AMCS Lab";
        char str2[] = {'A','M','C','S',' ','L','a','b'};
        int n1 = sizeof(str1)/sizeof(str1[0]);
        int n2 = sizeof(str2)/sizeof(str2[0]);
        printf("n1 = %d, n2 = %d", n1, n2);
        return 0;
    }
A) n1 = 10, n2 = 9
B) n1 = 10, n2 = 10
C) n1 = 9, n2 = 9
D) n1 = 9, n2 = 8
[Topic : String Handling]


8) What will be the output?

main()
{
     char s[ ]=&quot;man&quot;;
     int i;
     for(i=0;s[ i ];i++)
     printf(&quot;%c%c%c%c&quot;,s[ i ],*(s+i),*(i+s),i[s]);
}
A) mmmmaaaannnn
B) man
C) Compiler Error
D) Garbage Value
[Topic : String]


9) Suppose that the following declarations are in effect:
    int a[] = {17, 14, 10, -5, 14, 19};
    int *p = &a[1];
    int *q = &a[4];

Which of the following four logical expressions evaluates to FALSE?

A) p < q
B) *p == *q
C) a < p
D) p == q
[Topic : Arrays]


10) If p and q are pointers to int, pointing to elements of an array, which of the following
statements is not valid:

A) p = q + 2;
B) *p = p - q;
C) *p = p + q;
D) *p = *p + *q;
[Topic : Pointers]